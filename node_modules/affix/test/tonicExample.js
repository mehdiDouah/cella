var FIXTURE_ONE, FIXTURE_TWO, affix, fn, fnSetAndBound, fnSetThenBound, green, it, red, ref, reset, should, white;

ref = require('simple-ansi'), green = ref.green, white = ref.white, red = ref.red, reset = ref.reset;

FIXTURE_ONE = {
  test: 1,
  another: 2
};

FIXTURE_TWO = {
  test: "abc"
};

affix = require("affix")(FIXTURE_ONE);

should = require('should');

it = function(label, work) {
  var e;
  try {
    work();
    return console.log(green + "✔" + white + " - " + label + reset);
  } catch (_error) {
    e = _error;
    return console.log(red + "❌" + white + " - " + label + ": " + red + e.message + reset);
  }
};

fn = function() {
  return this.fixture;
};

affix.set("test");

fnSetThenBound = affix.bind(fn);

it("bind correctly after `require` > `set()` > `bind()`", function() {
  return fnSetThenBound().should.equal(FIXTURE_ONE.test);
});

fnSetAndBound = affix.setBind("another", fn);

it("bind correctly changing 'cursor' to `another`", function() {
  return fnSetAndBound().should.equal(FIXTURE_ONE.another);
});

affix.config(FIXTURE_TWO);

fnSetThenBound = affix.bind(fn);

it("bind correctly after fixture changed", function() {
  return (void 0 === fnSetThenBound()).should.be["false"];
});

affix.set("test");

it("binds `undefined` after cursor changed, but not rebound ", function() {
  return (void 0 === fnSetThenBound()).should.be["true"];
});

fnSetThenBound = affix.bind(fn);

it("bind value after cursor changed AND rebound", function() {
  return fnSetThenBound().should.equal(FIXTURE_TWO.test);
});

fnSetAndBound = affix.setBind("test", fn);

it("bind correctly after `setBind`", function() {
  return fnSetAndBound().should.equal(FIXTURE_TWO.test);
});

// ---
// generated by coffee-script 1.9.2